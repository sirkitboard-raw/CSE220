.text
.globl main
main:

	menu:
	la $a0, printmenu #prints menu
	li $v0, 4
	syscall

	li $v0, 5 #different options + branching
	syscall
	li $t1, 1
	li $t2, 2
	li $t3, 3
	beq $v0, $t3, exit
	beq $v0, $t1, LittleEndian

	LittleEndian:
		la $a0, enter #prints prompt
		li $v0, 4
		syscall

		li $v0, 8 	#read input
		move $v0, $a0
		
		#newlineloop:
			

		beginning: 
			la $a0, file #opens file
			li $a1, 0
			li $v0, 13
			syscall 

			move $t0, $v0 #move file descriptor to $a0
			#li $v0, 1
			#syscall
			
			#bltz $t0, negative

			#negative: 
				#la $a0, invalid
				#li $v0, 4
				#syscall
				#j beginning

				la $a0, ($t0)
				la $a1, buffer
				li $a2, 3
				li $v0, 14 #read from file
				syscall 
				beqz $v0, done

			######### READING THE BOM ######
				la $s0, buffer #load buffer and read first byte
				lbu $t1, 0($s0)
				
				add $t3, $t1, $zero
				sll $t3, $t3, 8 

				la $a0, ($t1)
				li $v0, 34
				syscall

				la $s0, buffer #load buffer and read second byte
				lbu $t1, 1($s0)
				
				add $t3, $t1, $zero
				sll $t3, $t3, 8

				la $a0, ($t1)
				li $v0, 34
				syscall

				la $s0, buffer #load buffer and read third byte
				lbu $t1, 2($s0)
				
				add $t3, $t1, $zero
				sll $t3, $t3, 8

				la $a0, ($t1)
				li $v0, 34
				syscall
				
				li $t4, 0xEFBBBBF
				bne $t0, $t4, main
				
			while: 
				la $a0, ($t0)
				la $a1, buffer
				li $a2, 3
				li $v0, 14 #read from file
				syscall 
				beqz $v0, done
				
				la $t4, buffer #load byte 
				li $t5, 0x80000 
				and $t4, $t4, $t5 #mask everything except MSB
				
				li $t6, 0x00000000
				beq $t4, $t6, onebyte
				
				la $t4, buffer
				li $t5, 0x88000
				and $t4, $t4, $t5
				
				li $t6, 0x88000
				beq $t4, $t6, twobyte						
				
				onebyte: 
					la $a0, printbyte #print "One Byte:"
					li $v0, 4
					syscall
					
					la $a0, buffer
					li $v0, 34
					syscall 
					
					la $a0, space
					li $v0, 4
					syscall
					
					la $a0,byte
					li $v0, 34
					syscall 
					
				twobyte:
					la $a0, printtwo
					li $v0, 4
					syscall
					
					la $a0, buffer
					li $v0, 34
					syscall
					
					la $a0, space
					li $v0, 4
					syscall
					
			
			j while

		done: 
			move $a0, $t0 #end reading
			li $v0, 16
			syscall

		exit: 
			li $v0, 10 #exit
			syscall 

.data
enter: .asciiz "Enter the path: "
file: .asciiz "utf8spec.txt"
printbyte: .asciiz "1 byte "
printtwo: .asciiz "2 byte "
printthree: .asciiz "3 byte "
space: .asciiz " "
buffer: .space 1
invalid: .asciiz "Invalid path. Please renter path: "
printmenu: .asciiz "== UTF Converter == \n 1. Encode UTF-8 -> UTF16-LE \n 2. Encode UTF-8 -> UTF16-BE \n 3. Exit \n"
bom: .word 
byte: .asciiz "U+"